@startuml
class CanvasRunner
interface ICanvas
class CanvasConstants
class Canvas
class Pixel
class WidthBorder
class HeightBorder
class Status
enum StatusTypes
class Success
class Failed
class CanvasException
class Position

interface Painter
class BoxPainter
class FillPainter
class LinePainter
class RectanglePainter
class CanvasPainter

interface Command
class CommandParser

ICanvas <|-- Canvas
Canvas "..1*" *-- Pixel
Status <|-- Success
Status <|-- Failed
Pixel *-- Position : Contains
Pixel <|-- WidthBorder
Pixel <|== HeightBorder
Status o-- StatusTypes : Contains

Painter <|-- LinePainter
Painter <|-- BoxPainter
BoxPainter <|-- RectanglePainter
Painter <|-- FillPainter
Painter <|-- CanvasPainter

CanvasRunner o-- ICanvas : Contains
CanvasRunner o-- CommandParser : Contains
CommandParser o-- Painter : returns

enum StatusTypes {
SUCCESS
FAILED
}

class CanvasException {
    - message: String
}

class Pixel {
    - text: String
    + isBlank():Boolean
}

class Position {
    + x: Int
    + y: Int
}

class CanvasConstants {
    + WIDTH_BORDER_CHAR = "-"
    + HEIGHT_BORDER_CHAR = "|"
    + DEFAULT_DISPLAY_CHAR  = " "
    + INVALID_TEXT_CHAR = "~"
    + LINE_DISPLAY_CHAR = "*"
}

interface ICanvas {
    + createCanvas(width: Int, height:Int): Boolean
    + printScreen()
    + isPositionAvailable(pos: Position): Boolean
    + isPositionWritable(pos: Position): Boolean
    + getPixelValueAt(pos: Position): String
    + setPixelValueAt() : Boolean
    + setPixelValueBetween() : List<Position>
    + writableChildrenOf(pos: Position): List<Position>
}
class Canvas {
    + pixels: Array<Array<Pixel>>
    + createCanvas(width: Int, height:Int): Boolean
    + printScreen()
    + isPositionAvailable(pos: Position): Boolean
    + isPositionWritable(pos: Position): Boolean
    + getPixelValueAt(pos: Position): String
    + setPixelValueAt() : Boolean
    + setPixelValueBetween() : List<Position>
    + writableChildrenOf(pos: Position): List<Position>
}

class Status {
    + status: StatusTypes
}

interface Painter {
    + validate(canvas: ICanvas): Status
    + paint(canvas: ICanvas) : Status
}

class BoxPainter {
    - start: Position
    - end: Position
    + validate(canvas: ICanvas): Status
    + paint(canvas: ICanvas): Status
}

class FillPainter {
    - start:Position
    - colour: String
    + validate(canvas: ICanvas): Status
    + paint(canvas: ICanvas): Status
    - fillByBreadthFirstSearch(canvas: ICanvas) : Success
}

class LinePainter {
    - start: Position
    - end: Position
    + validate(canvas: ICanvas) : Status
    + paint(canvas: ICanvas): Status
}

class RectanglePainter {
    + validate(canvas: ICanvas): Status
}

class CanvasPainter {
    + paint(canvas: ICanvas): Status
}


class CommandParser {
    - createPainterFunList: MutableList<(String) -> Painter?>
    + parse(cmd: String): Painter
    - parseCommand(regex: Regex, string: String): MatchResult.Destructured ?
    - createCanvasPainter(cmd: String):Painter?
    - createFillCommandPainter(cmd: String): Painter?
    - createLineCommandPainter(cmd:String): Painter?
    - quiteCommandPainter(cmd: String) : Painter?
    - fun rectangleCommandPainter(cmd: String): Painter?
}


class CanvasRunner {

    + main(args: Array<String>)
    - canvas: ICanvas
    - builder:CommandBuilder
    - readLine(): String
    ~ executeCommand(command: String)
    - executeConsoleCommands()
    + start()
}


@enduml